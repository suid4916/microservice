
spring.application.name=licensing-service
spring.profiles.active=dev
spring.config.import=optional:configserver:
#spring.cloud.config.uri=http://configserver:8071
spring.cloud.config.uri=http://localhost:8071

management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true

eureka.instance.perferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
#eureka.client.serviceUrl.defaultZone=http://localhost:8070/eureka/
eureka.client.serviceUrl.defaultZone=http://eurekaserver:8070/eureka/

logging.level.org.springframework.web=WARN
logging.level.com.spring.microservice=DEBUG

#회로 차단기 구현
#licenseService 라이선싱 서비스의 인스턴스 구성(회로 차단기 애너테이션에 전달되는 이름과 동일)
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.circuitbreaker.instances.licenseService.registerHealthIndicator=true
# 링 버퍼의 닫힌 상태 크기를 설정
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInClosedState=5
# 링 버퍼의 반열린 상태의 크기 설정
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInHalfOpenState=3
#열린 상태의 대기시간 설정
resilience4j.circuitbreaker.instances.licenseService.waitDurationInOpenState=10s
# 실패율 임계치를 백분율로 설정
resilience4j.circuitbreaker.instances.licenseService.failureRateThreshold=50

resilience4j.circuitbreaker.instances.licenseService.recordExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[1]=java.io.IOException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[2]=java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[3]=org.springframework.web.client.ResourceAccessException

resilience4j.circuitbreaker.instances.organizationService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInClosedState=6
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInHalfOpenState=4
resilience4j.circuitbreaker.instances.organizationService.waitDurationInOpenState=20s
resilience4j.circuitbreaker.instances.organizationService.failureRateThreshold=60

# 벌크 헤드 패턴 (한번에 X개의 동시호출만 허용하는 역할)
resilience4j.bulkhead.instances.bulkheadLicenseService.registerHealthIndicator=true
# 스레드를 차단할 최대 시간
resilience4j.bulkhead.instances.bulkheadLicenseService.maxWaitDuration=0
# 최대 동시 호출 수
resilience4j.bulkhead.instances.bulkheadLicenseService.maxConcurrentCalls=25
#스레드 풀에서 최대 스레드 수
# 스레드 풀의 적절한 크기 공식 (서비스가 정상일 때 최고점(peek)에서 초당 요청 수 * 99 백분위수(P99) 지연시간(단위:초)) + 부하를 대한 약간의 추가 스레드  
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.maxThreadPoolSize=4
# 코어 스레드 풀 크기
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.coreThreadPoolSize=2
# 큐 용량
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.queueCapacity=50
# 유휴 스레드가 종료되기 전 새 태스크를 기다리는 최대 시간
#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.keepAliveDuration=20ms

#속도 제한기 패턴 (Y초 마다 X개의 호출을 허용하는 역할)
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.ratelimiter.instances.ratelimiterLicenseService.registerHealthIndicator=true
#스레드가 허용을 기다리는 시간을 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.timeoutDuration=1000ms
# 갱신 제한 기간 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.limitRefreshPeriod=5000
# 갱신 제한 기간 동안 가용한 허용 수 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.limitForPeriod=5

#재시도 패턴
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.retry.instances.retryLicenseService.registerHealthIndicator=true
#재시도 최대 횟수
resilience4j.retry.instances.retryLicenseService.maxRetryAttempts=5
# 재시도 간 대기 시간
resilience4j.retry.instances.retryLicenseService.waitDuration=10000
# 재시도 예외 목록
resilience4j.retry.instances.retryLicenseService.retry-exceptions[0]=java.util.concurrent.TimeoutException