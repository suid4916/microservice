example.property=I AM THE DEFAULT


#server.port= 8180

eureka.instance.perferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
#eureka.client.serviceUrl.defaultZone=http://localhost:8070/eureka/
eureka.client.serviceUrl.defaultZone=http://eurekaserver:8070/eureka/


#회로 차단기 구현
#licenseService 라이선싱 서비스의 인스턴스 구성(회로 차단기 애너테이션에 전달되는 이름과 동일)
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.circuitbreaker.instances.licenseService.registerHealthIndicator=true
# 링 버퍼의 닫힌 상태 크기를 설정
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInClosedState=5
# 링 버퍼의 반열린 상태의 크기 설정
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInHalfOpenState=3
#열린 상태의 대기시간 설정
resilience4j.circuitbreaker.instances.licenseService.waitDurationInOpenState=10s
# 실패율 임계치를 백분율로 설정
resilience4j.circuitbreaker.instances.licenseService.failureRateThreshold=50

resilience4j.circuitbreaker.instances.licenseService.recordExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[1]=java.io.IOException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[2]=java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[3]=org.springframework.web.client.ResourceAccessException

resilience4j.circuitbreaker.instances.organizationService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInClosedState=6
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInHalfOpenState=4
resilience4j.circuitbreaker.instances.organizationService.waitDurationInOpenState=20s
resilience4j.circuitbreaker.instances.organizationService.failureRateThreshold=60

# 벌크 헤드 패턴 (한번에 X개의 동시호출만 허용하는 역할)
resilience4j.bulkhead.instances.bulkheadLicenseService.registerHealthIndicator=true
# 스레드를 차단할 최대 시간
resilience4j.bulkhead.instances.bulkheadLicenseService.maxWaitDuration=0
# 최대 동시 호출 수
resilience4j.bulkhead.instances.bulkheadLicenseService.maxConcurrentCalls=25
#스레드 풀에서 최대 스레드 수
# 스레드 풀의 적절한 크기 공식 (서비스가 정상일 때 최고점(peek)에서 초당 요청 수 * 99 백분위수(P99) 지연시간(단위:초)) + 부하를 대한 약간의 추가 스레드  
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.maxThreadPoolSize=4
# 코어 스레드 풀 크기
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.coreThreadPoolSize=2
# 큐 용량
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.queueCapacity=50
# 유휴 스레드가 종료되기 전 새 태스크를 기다리는 최대 시간
#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.keepAliveDuration=20ms

#속도 제한기 패턴 (Y초 마다 X개의 호출을 허용하는 역할)
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.ratelimiter.instances.ratelimiterLicenseService.registerHealthIndicator=true
#스레드가 허용을 기다리는 시간을 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.timeoutDuration=1000ms
# 갱신 제한 기간 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.limitRefreshPeriod=5000
# 갱신 제한 기간 동안 가용한 허용 수 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.limitForPeriod=5

#재시도 패턴
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.retry.instances.retryLicenseService.registerHealthIndicator=true
#재시도 최대 횟수
resilience4j.retry.instances.retryLicenseService.maxRetryAttempts=5
# 재시도 간 대기 시간
resilience4j.retry.instances.retryLicenseService.waitDuration=10000
# 재시도 예외 목록
resilience4j.retry.instances.retryLicenseService.retry-exceptions[0]=java.util.concurrent.TimeoutException



spring.jackson.serialization.INDENT_OUTPUT=true

#mysql config
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

#show sql in console
spring.jpa.show-sql=true
spring.datasource.platform=mysql

#setting hibernate
spirng.jpa.database=mysql
#Initialize Database when server start
# none : never changes Database's construction
# update : applies changed schemas
# create : drop and re create when server start up
# create-drop : drop all when start and end server
spring.jpa.hibernate.dll-auto=none

#setting camelcase to underscore option to disable.
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1


spring.security.oauth2.resource.id=ostock
spring.security.oauth2.resource.token-info-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/token/introspect
spring.security.oauth2.resource.user-info-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/userinfo
spring.security.oauth2.resource.jwt.key-value={cipher}f491cbfd4ba4d1ca83b777dffa18547996e3e77cd01bcca0095c1c616fe812ef8c539c5bc15371545603cd5c3c44022e457d5c848e13352ab7100a3260cb88fe8b801bfedb8c2511bdcad1e00b53089d7c241bc6374fdb74ec6d91b2e97d701a46c8cedbc62140c03460f277ade0540d490cf8ab81012f4f2fa0e6d8b78f0ee1dc656538c3f916907181830e3961b9e549bb76cf500feabc419a3507fb3e4102969898dbdffc7a46d4ec2b3d73fe305ca8a62eef95c8d0a4630e9dd6683d4441e60d80a4a2b647bac3616bc2700bb12d7e3f07d3043c6e56a7784739493217667070a8d105424b033ad5f7e5ba85c88b04eb42b768b93ab6f2815d6287e1fe771114525191cb86b09b8de53b6f97f26c5569ab7b33871620db5b49965748d08c37b53174eb419b9177705a6216a25cf060de5e206b7f65023349d23bdeffc9168d94ea659826724fc4920ad87cea5050897f016311255bde4fc7ac813748029b985bfa5b9aa0712cffa123682f22b2981f22d0a7327876cf1cd3de1f8c78c2c991d8bdf0b3f87bd06f605be9dd2dc912b53dc4824f9fafa58170875f8e84f22701e6aa475ccbfa2fb5e70b0951da4a2a7f4b4adf6a50f155c80c097d5e7041e7f0a1f1bb101a0d1dca42a114081fc29f162681daf3d4b5af8c74143cba5f951de86e13635d6a28ab2e16c8041052ef673fbe4cf7404ad8dac0554b0ceb5ba89cfbe473d65ef71f3bd282d727c55b4d978feb7b86230ea5ab754d0290d06701b5181e552ef648e26f5fccccf1525252e688dbfbbdebb1da8bf0b2500461f14505755123a3876bc58f42d592438c6536f2a8ed324850f55da23454bdea6551febb41ec34aee874a5c4942158c4d36ff0e53d9ae7a4c92cea481dce2759a36a928939b5af407f750aa23d80e9cd4a6f0ca46fefb9725571a2a8df30c5cdb1fb2b7dbdb538f15246720884eb2df69575eb61b4e077085b2d87bd586dad82cf8b6ab141e4281ca64e5dab4b32cb8de830ccf864bfdc9d25d55b2de36ced4247a2c3f62b574da50b3abb835e0cbee5cdb1b4de4626fdc5269bb6be46c05e37efe96a7b656bcbe0b1faba7dc3c1ce2f3098f8232896eda37fb2ad5d09a76150c15ca990d8780f37a58124b979c0f7c83dc6fff55fe7ed514efa699102cd487cac48ce303da195a05a53091fbcebaae7b4efdb917e5e73b415067bb16fc4056bcb50ee9b80e8a3da722b20c84dd304f45f03cd9c2442690205221ce3b3e4ada28e252f0cd0fa83b1289ff5ae9dfc14532ac9400545ccc6a070180339daf5307c865f2d8c0a909298214f7a2bc06743cd92780e2bf35ad11b65babbd435a118f82239813406ca4a5b9d2361b79eb1aefc196ac853c430592b496d961e963524a942645dfaaf1ab11df7218a39bb2a2c645952d206e5bcee23d1cd89b5f02927e8b202aefea17b1b7e047207213c61f1e8e96b682a76b9c5ea822967e926128a4d49f89f84678a99b4c0e2a2250b70aead82eeca5bba1f4fbe7701026b9764d5ecbcd091ed8cba1f99cffb8d6c06877f6ebf58c6231966a8c5b4f39ec36831048e00ac234bb0485e0906fe7bb8b1c945ea0bf11fce4822f83a831a2767d13f7104993139a5378e7d8ffd781defac84028992decd9fdb46b24a22380a2095ae03ffbce1627dd2b964656e3d127ce3f82fc26f0be03cdb495d3042057f8271e4c08569fe53cff3cd0cb0d5f66984eb148fd23d39e0075e7c46cd61c168ef72de2a19ef86d89ff1b7908eebeb5bae4afd4a9bf963794c55b528c9c936cdfc98d72b4570dd9d939a08a1afd300208b241e0c1f0030188564af940cbf9d0448a8b7b0879b529184

spring.security.oauth2.client.client-secret=68977d81-c59b-49aa-aada-58da9a43a850
spring.security.oauth2.client.user-authorization-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/auth
spring.security.oauth2.client.access-token-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/token
spring.security.oauth2.client.scope=openid,email,profile
spring.security.oauth2.client.grant-type=client_credentials

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/auth/realms/spmia-realm


redis.server = redis
redis.port = 6379
