example.property=I AM THE DEFAULT


#server.port= 8180

eureka.instance.perferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
#eureka.client.serviceUrl.defaultZone=http://localhost:8070/eureka/
eureka.client.serviceUrl.defaultZone=http://eurekaserver:8070/eureka/


#회로 차단기 구현
#licenseService 라이선싱 서비스의 인스턴스 구성(회로 차단기 애너테이션에 전달되는 이름과 동일)
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.circuitbreaker.instances.licenseService.registerHealthIndicator=true
# 링 버퍼의 닫힌 상태 크기를 설정
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInClosedState=5
# 링 버퍼의 반열린 상태의 크기 설정
resilience4j.circuitbreaker.instances.licenseService.ringBufferSizeInHalfOpenState=3
#열린 상태의 대기시간 설정
resilience4j.circuitbreaker.instances.licenseService.waitDurationInOpenState=10s
# 실패율 임계치를 백분율로 설정
resilience4j.circuitbreaker.instances.licenseService.failureRateThreshold=50

resilience4j.circuitbreaker.instances.licenseService.recordExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[1]=java.io.IOException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[2]=java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.instances.licenseService.recordExceptions[3]=org.springframework.web.client.ResourceAccessException

resilience4j.circuitbreaker.instances.organizationService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInClosedState=6
resilience4j.circuitbreaker.instances.organizationService.ringBufferSizeInHalfOpenState=4
resilience4j.circuitbreaker.instances.organizationService.waitDurationInOpenState=20s
resilience4j.circuitbreaker.instances.organizationService.failureRateThreshold=60

# 벌크 헤드 패턴 (한번에 X개의 동시호출만 허용하는 역할)
resilience4j.bulkhead.instances.bulkheadLicenseService.registerHealthIndicator=true
# 스레드를 차단할 최대 시간
resilience4j.bulkhead.instances.bulkheadLicenseService.maxWaitDuration=0
# 최대 동시 호출 수
resilience4j.bulkhead.instances.bulkheadLicenseService.maxConcurrentCalls=25
#스레드 풀에서 최대 스레드 수
# 스레드 풀의 적절한 크기 공식 (서비스가 정상일 때 최고점(peek)에서 초당 요청 수 * 99 백분위수(P99) 지연시간(단위:초)) + 부하를 대한 약간의 추가 스레드  
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.maxThreadPoolSize=4
# 코어 스레드 풀 크기
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.coreThreadPoolSize=2
# 큐 용량
resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.queueCapacity=50
# 유휴 스레드가 종료되기 전 새 태스크를 기다리는 최대 시간
#resilience4j.thread-pool-bulkhead.instances.bulkheadLicenseService.keepAliveDuration=20ms

#속도 제한기 패턴 (Y초 마다 X개의 호출을 허용하는 역할)
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.ratelimiter.instances.ratelimiterLicenseService.registerHealthIndicator=true
#스레드가 허용을 기다리는 시간을 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.timeoutDuration=1000ms
# 갱신 제한 기간 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.limitRefreshPeriod=5000
# 갱신 제한 기간 동안 가용한 허용 수 정의
resilience4j.ratelimiter.instances.ratelimiterLicenseService.limitForPeriod=5

#재시도 패턴
#상태 정보 엔드포인트에 대한 구성 정보 노출 설정
resilience4j.retry.instances.retryLicenseService.registerHealthIndicator=true
#재시도 최대 횟수
resilience4j.retry.instances.retryLicenseService.maxRetryAttempts=5
# 재시도 간 대기 시간
resilience4j.retry.instances.retryLicenseService.waitDuration=10000
# 재시도 예외 목록
resilience4j.retry.instances.retryLicenseService.retry-exceptions[0]=java.util.concurrent.TimeoutException



spring.jackson.serialization.INDENT_OUTPUT=true

#mysql config
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

#show sql in console
spring.jpa.show-sql=true
spring.datasource.platform=mysql

#setting hibernate
spirng.jpa.database=mysql
#Initialize Database when server start
# none : never changes Database's construction
# update : applies changed schemas
# create : drop and re create when server start up
# create-drop : drop all when start and end server
spring.jpa.hibernate.dll-auto=none

#setting camelcase to underscore option to disable.
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1


spring.security.oauth2.resource.id=ostock
spring.security.oauth2.resource.token-info-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/token/introspect
spring.security.oauth2.resource.user-info-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/userinfo
spring.security.oauth2.resource.jwt.key-value=eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJnbHROS3JaWEtHdDc2VWxLRXYzRTlwSjFVZU1pc3RCTXpXQS1KczJ2R2I4In0.eyJleHAiOjE2ODA0OTg0NzAsImlhdCI6MTY4MDQ5ODE3MCwianRpIjoiNzkxNTYxMmUtZWM0NC00ODZiLThjMDAtYTJmMzg4NzlkNTAyIiwiaXNzIjoiaHR0cDovL2tleWNsb2FrOjgwODAvYXV0aC9yZWFsbXMvc3BtaWEtcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiYjg3OGU1M2EtMmM0ZC00MTQ2LThmMTktZDgwOTI0NDI5MjA3IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoib3N0b2NrIiwic2Vzc2lvbl9zdGF0ZSI6ImU0Y2I2NGNlLTA0NmQtNDQ2MS04NDE0LTk5YWZiMGI3NmMwZCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXNwbWlhLXJlYWxtIiwidW1hX2F1dGhvcml6YXRpb24iLCJvc3RvY2stdXNlciJdfSwicmVzb3VyY2VfYWNjZXNzIjp7Im9zdG9jayI6eyJyb2xlcyI6WyJVU0VSIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiam9obi5jYXJuZWxsIn0.ALkAgUkYwaIDUxCM1ggd_D7O9Jr87v4igrV_9HkY2FgOiNz37DhgpB9WF51_m-6u0fgopuUSk46qoYhqDXpXQXA8d-n1GfG-rTR4Th9k1RD1Fbs4RLKqzqT5rATR_AcMDL-vCWN7ZILYYlrS1g6iSILY0WqHDzCSnvhSdA2YSB1Kqd8rtqDQzmS1MHckduQnhAHaoFGLVmqyHKpcXkL1dBdE3lTszIQGPt1-WCLW8iYGNIDpQJt-QNDQXyztnofl7cFuH5ykVBvOKnhL8k7rFEj7jERAuGU2qn9vlVSigQz4CAtrsi7VhOzr3SsjCrUtDPIxrkUTpMTcWcOZ7h6XZQ

spring.security.oauth2.client.client-secret=68977d81-c59b-49aa-aada-58da9a43a850
spring.security.oauth2.client.user-authorization-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/auth
spring.security.oauth2.client.access-token-uri=http://keycloak:8080/auth/realms/spmia-realm/protocol/openid-connect/token
spring.security.oauth2.client.scope=openid,email,profile
spring.security.oauth2.client.grant-type=client_credentials

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/auth/realms/spmia-realm

